# Copyright (c) 2007 The Kaphan Foundation
#
# Possession of a copy of this file grants no permission or license
# to use, modify, or create derivate works.
# Please contact info@peerworks.org for further information.
#

require 'cv/tagging'
require 'cv/taggable'
require 'cv/taggable_tokenizer'
require 'cv/tagging_comparator'
require 'bayes'
require 'analysis'
require 'progressbar'

namespace :classifier do  
  
  desc "Dumps the output generated by the classifier"
  task :dump_tags => [".seed"] do    
    include Analysis
    srand(File.read(".seed").to_i)
    corpus = get_corpus
    tagger = get_tagger(corpus)
    
    taggings = Tagging.load_for_tagger(corpus, tagger)
    taggables = Taggable.find(corpus).compact
    taggables_to_classify = taggables.sort_by{rand}.first(5000)
    dump_ids(taggables_to_classify, File.join(corpus, "samples.txt"))
    taggables_by_id = taggables.hash_by(:taggable_id)
    classifier = create_classifier(TaggableTokenizer.new(corpus)) 
    
    progress = ProgressBar.new("Random BG", 500)
    random_bg = taggables.sort_by{rand}.first(500)
    dump_ids(random_bg, File.join(corpus, "random_background.txt"))
    random_bg.each do |taggable|
      classifier.train(RANDOM_BACKGROUND, taggable, taggable.taggable_id)
      progress.inc
    end
    progress.finish    
    
    progress = ProgressBar.new("Training", taggings.size)
    taggings.each do |tagging|
      classifier.train(pool_name_for(tagging), taggables_by_id[tagging.taggable_id], tagging.taggable_id)
      progress.inc
    end
    progress.finish
        
    File.open("#{tagger}-classifier-taggings.csv", 'w') do |f|
      progress = ProgressBar.new("Classifying", taggables_to_classify.size)
      taggables_to_classify.sort.each do |taggable|        
        classifier.guess(taggable).sort.each do |tag, strength|
          f << [tag, taggable.taggable_id, strength].join(",") + "\n"
        end
        progress.inc
      end
      progress.finish
    end
  end
  
  task :compare do
    corpus = get_corpus
    set1, set2 = ENV['sets'].split(',')
    set1 = Tagging.load('.', "#{set1}.csv")
    set2 = Tagging.load('.', "#{set2}.csv")
    TaggingComparator.new(set1, set2).print(File.open("#{ENV['sets']}.html", 'w'))    
  end  

  def get_corpus
    corpus = ENV['corpus']
    if corpus.nil?
      raise "You must provide a corpus directory"
    elsif !File.exists?(corpus)
      raise "Corpus directory: #{corpus} does not exist"
    else
      return corpus
    end
  end
  
  def get_tagger(corpus)
    tagger = ENV['tagger']
    if tagger.nil?
      raise "You must provide a tagger parameter"
    elsif !File.exists?(File.join(corpus, "#{tagger}-taggings.csv"))
      raise "taggings file for #{tagger} does not exist"
    else
      tagger
    end
  end
  
  def dump_ids(taggables, file)
    File.open(file, 'w') do |f|
      f << taggables.map{|t| t.taggable_id}.join("\n")
    end
  end
end